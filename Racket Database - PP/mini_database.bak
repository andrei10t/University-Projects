#lang racket
(define NULL 'null)

;====================================
;=            Cerința 1             =
;= Definirea elementelor de control =
;=          20 de puncte            =
;====================================

;= Funcțiile de acces
(define init-database
  (λ ()
    '()))

(define create-table
  (λ (table columns-name)
    (cons (list columns-name) table )
    )
  )

(define get-name
  (λ (table)
    (cdr table )))

(define get-columns
  (λ (table)
    (caar table)))

(define get-tables
  (λ (db)
    db))

(define get-table
  (λ (db table-name)
    (if (equal? (cdr (first db)) table-name)
        (car db)
        (get-table (rest db) table-name)
        )))


(define add-table
  (λ (db table)
    (if (null? db)
        (list table)
        (append db (list table))
     )
  )
)

(define remove-table
  (λ (db table-name)
    (cond
      ((null? db) '()) 
      ((equal? (cdr (car db)) table-name) (remove-table (rest db) table-name))
      (else (cons (first db) (remove-table (rest db) table-name))) 
        )))

;= Pentru testare, va trebui să definiți o bază de date (având identificatorul db) cu următoarele tabele

;============================================================================================
;=                         Tabela Studenți                                                   =
;= +----------------+-----------+---------+-------+-------+                                  =
;= | Număr matricol |   Nume    | Prenume | Grupă | Medie |                                  =
;= +----------------+-----------+---------+-------+-------+                                  =
;= |            123 | Ionescu   | Gigel   | 321CA |  9.82 |                                  =
;= |            124 | Popescu   | Maria   | 321CB |  9.91 |                                  =
;= |            125 | Popa      | Ionel   | 321CC |  9.99 |                                  =
;= |            126 | Georgescu | Ioana   | 321CD |  9.87 |                                  =
;= +----------------+-----------+---------+-------+-------+                                  =
;=                                                                                           =
;=                                         Tabela Cursuri                                    =
;= +------+----------+-----------------------------------+---------------+------------+      =
;= | Anul | Semestru |            Disciplină             | Număr credite | Număr teme |      =
;= +------+----------+-----------------------------------+---------------+------------+      =
;= | I    | I        | Programarea calculatoarelor       |             5 |          2 |      =
;= | II   | II       | Paradigme de programare           |             6 |          3 |      =
;= | III  | I        | Algoritmi paraleli și distribuiți |             5 |          3 |      =
;= | IV   | I        | Inteligență artificială           |             6 |          3 |      =
;= | I    | II       | Structuri de date                 |             5 |          3 |      =
;= | III  | II       | Baze de date                      |             5 |          0 |      =
;= +------+----------+-----------------------------------+---------------+------------+      =
;============================================================================================
(define studenti
  (cons
(list
(list "Număr matricol" "Nume"      "Prenume" "Grupă"  "Medie")
(list 123            "Ionescu"   "Gigel"   "321CA"  9.82 ) 
(list 124            "Popescu"   "Maria"   "321CB"  9.91 ) 
(list 125            "Popa"      "Ionel"   "321CC"  9.99 ) 
(list 126            "Georgescu" "Ioana"   "321CD"  9.87 ) 
)
"Studenți"
))

(define cursuri
  (cons
 (list
 (list "Anul" "Semestru" "Disciplină"                         "Număr credite" "Număr teme" )
 (list "I"    "I"        "Programarea calculatoarelor"        5                 2          )
 (list "II"   "II"       "Paradigme de programare"            6                 3          )
 (list "III"  "I"        "Algoritmi paraleli și distribuiți"  5                 3          )
 (list "IV"   "I"        "Inteligență artificială"            6                 3          )         
 (list "I"    "II"       "Structuri de date"                  5                 3          )
 (list "III"  "II"       "Baze de date"                       5                 0          )
 )
  "Cursuri"
))


  
;(displayln studenti)
;(displayln cursuri)

(define db
  (list studenti cursuri)
  )
;(displayln db)

;====================================
;=            Cerința 2             =
;=         Operația insert          =
;=            10 puncte             =
;====================================
(define insertion
  (λ (columns record acc)
    (if(null? columns)
       acc
       (if (member (car columns) (map car record))
        (insertion (cdr columns) record (append acc (list (cdr(car (list-tail record (index-of (map car record) (car columns))))))))  
        (insertion (cdr columns) record (append acc (list NULL)))
        )
    )
    ))

(define insert-acumulator
  (λ (db table-name record acc)
    (if(null? db)
       acc
       (if (equal? (get-name (car db)) table-name)
           (insert-acumulator (cdr db) table-name record (append acc (list (cons (append (car (first db)) (list (insertion (get-columns (first db)) record null)) ) table-name))))
           (insert-acumulator (rest db) table-name record (append acc (list (first db))))
           )
       )))

(define insert
  (λ (db table-name record)
   
    (insert-acumulator db table-name record null)
    ))

    
    


;====================================
;=            Cerința 3 a)          =
;=     Operația simple-select       =
;=             10 puncte            =
;====================================



(define simple-select-helper
  (λ(db table-name columns acc)
    (if(null? columns)
       acc
       (simple-select-helper db table-name (cdr columns) ( append acc (list (map (λ(line) (list-ref line (index-of (car(car (get-table db table-name))) (car columns)) )) (cdar (get-table db table-name)) ))))
       )))
(define simple-select
  (λ (db table-name columns)
    (if(null? columns)
    null
    (simple-select-helper db table-name columns null)    
    )          
    ))

;====================================
;=            Cerința 3 b)          =
;=           Operația select        =
;=            30 de puncte          =
;====================================
(define conditie
  (λ (db table-name comparator coloana value)
     ( filter  (λ (elem) (comparator elem value)) (car(simple-select db table-name (list coloana)) ))
    
    )
  )

(define select
  (λ (db table-name columns conditions)
    ( map conditie   )

    ))

;====================================
;=             Cerința 4            =
;=           Operația update        =
;=            20 de puncte          =
;====================================
(define update
  (λ (db table-name values conditions)
    'your-code-here))

;====================================
;=             Cerința 5            =
;=           Operația remove        =
;=              10 puncte           =
;====================================
(define delete
  (λ (db table-name conditions)
    'your-code-here))

;====================================
;=               Bonus              =
;=            Natural Join          =
;=            20 de puncte          =
;====================================
(define natural-join
  (λ (db tables columns conditions)
    'your-code-here))



